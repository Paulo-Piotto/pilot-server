generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model clients {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  author                String?
  accountable           String?
  address               String?
  contact               String?
  document              String?
  project_number        String?
  isArchived            Boolean                 @default(false)
  employees_worked_days employees_worked_days[]
  orders                orders[]
  incomes               incomes[]
}

model employees {
  id                    Int                     @id @default(autoincrement())
  name                  String                  @unique
  fullname              String?
  wage                  Int
  start_day             DateTime
  address               String?
  contact               String?
  document              String?
  pix                   String?
  obs                   String?
  author                String?
  employees_worked_days employees_worked_days[]
  employees_food        employees_food[]
}

model employees_worked_days {
  id          Int       @id @default(autoincrement())
  employee_id Int
  client_id   Int
  date        DateTime  @default(now())
  clients     clients   @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_worked_days_client_id_foreign")
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_worked_days_employee_id_foreign")
}

model employees_food {
  id          Int       @id @default(autoincrement())
  employee_id Int
  type        String
  value       Int
  date        DateTime  @default(now())
  employees   employees @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "employees_food_employee_id_foreign")
}

model orders {
  id               Int      @id @default(autoincrement())
  invoice          String
  date             DateTime @default(now())
  store_id         Int
  client_id        Int
  value            Int
  value_negotiated Int?
  value_cash       Int
  value_financed   Int
  author           String?
  clients          clients  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_client_id_foreign")
  stores           stores   @relation(fields: [store_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_store_id_foreign")
}

model incomes {
  id        Int      @id @default(autoincrement())
  name      String
  date      DateTime @default(now())
  client_id Int
  value     Int
  author    String?
  clients   clients  @relation(fields: [client_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "orders_client_id_foreign")
}

model stores {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  author      String?
  accountable String?
  address     String?
  contact     String?
  orders      orders[]
}

model roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users users[]
}

model users {
  id       Int    @id @default(autoincrement())
  name     String
  role     roles  @relation(fields: [role_id], references: [id])
  role_id  Int
  email    String @unique
  password String
}
